# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the OS, Python version and other tools you might need
build:
    os: ubuntu-22.04
    tools:
        python: "3.11"
    jobs:
        post_create_environment:
            # Install LinkML tools first
            - pip install --upgrade pip
            - pip install linkml linkml-runtime
        pre_build:
            # Create documentation directory structure
            - mkdir -p docs/schema/main
            - mkdir -p docs/schema/objects
            - mkdir -p docs/schema/stages
            - mkdir -p docs/api
            - mkdir -p docs/assets

            # Copy logo and favicon to docs/assets for MkDocs
            - cp images/logo_full.png docs/assets/logo_full.png || echo "Logo not found, skipping"
            - cp images/favicon.ico docs/assets/favicon.ico || echo "Favicon not found, skipping"

            # Generate documentation from LinkML schemas
            - echo "Generating LinkML documentation..."
            # Determine version based on ReadTheDocs environment
            - |
                if [ -n "$READTHEDOCS_VERSION" ]; then
                    echo "ReadTheDocs version: $READTHEDOCS_VERSION"
                    if [ "$READTHEDOCS_VERSION" = "latest" ] && [ -f "VERSION" ]; then
                        VERSION="$(cat VERSION | tr -d '[:space:]')-dev"
                    elif [ "$READTHEDOCS_VERSION" = "stable" ] && [ -f "VERSION" ]; then
                        VERSION=$(cat VERSION | tr -d '[:space:]')
                    elif [ -f "VERSION" ]; then
                        VERSION=$(cat VERSION | tr -d '[:space:]')
                    else
                        VERSION="$READTHEDOCS_VERSION"
                    fi
                elif [ -f "VERSION" ]; then
                    VERSION=$(cat VERSION | tr -d '[:space:]')
                else
                    VERSION="dev"
                fi
                echo "Using version: $VERSION"
                # Clean version for schema (remove -dev suffix)
                SCHEMA_VERSION=$(echo "$VERSION" | sed 's/-dev$//')
                # Create temporary schema with version injected
                awk -v ver="$SCHEMA_VERSION" '/^name: revaise$/{print; print "version: " ver; next}1' schema/revaise.yaml > schema/revaise_temp.yaml
                gen-doc schema/revaise_temp.yaml --directory docs/schema/main || echo "Main schema docs generated"
                rm -f schema/revaise_temp.yaml

            # Generate object documentation
            - for file in schema/model/objects/*.yaml; do basename=$(basename "$file" .yaml); echo "Processing $basename..."; gen-doc "$file" --directory "docs/schema/objects/$basename" 2>/dev/null || echo "Skipped $basename"; done

            # Generate stage documentation
            - for file in schema/model/stages/*.yaml; do basename=$(basename "$file" .yaml); echo "Processing $basename..."; gen-doc "$file" --directory "docs/schema/stages/$basename" 2>/dev/null || echo "Skipped $basename"; done

            # Generate JSON Schema and JSON-LD context
            - echo "Generating JSON Schema..."
            - |
                # Use same version logic as above
                if [ -n "$READTHEDOCS_VERSION" ]; then
                    if [ "$READTHEDOCS_VERSION" = "latest" ] && [ -f "VERSION" ]; then
                        VERSION="$(cat VERSION | tr -d '[:space:]')-dev"
                    elif [ "$READTHEDOCS_VERSION" = "stable" ] && [ -f "VERSION" ]; then
                        VERSION=$(cat VERSION | tr -d '[:space:]')
                    elif [ -f "VERSION" ]; then
                        VERSION=$(cat VERSION | tr -d '[:space:]')
                    else
                        VERSION="$READTHEDOCS_VERSION"
                    fi
                elif [ -f "VERSION" ]; then
                    VERSION=$(cat VERSION | tr -d '[:space:]')
                else
                    VERSION="dev"
                fi
                # Clean version for schema (remove -dev suffix)
                SCHEMA_VERSION=$(echo "$VERSION" | sed 's/-dev$//')
                # Create temporary schema with version injected
                awk -v ver="$SCHEMA_VERSION" '/^name: revaise$/{print; print "version: " ver; next}1' schema/revaise.yaml > schema/revaise_temp.yaml
                gen-json-schema schema/revaise_temp.yaml > docs/api/revaise.schema.json || echo "JSON Schema generated"
                gen-jsonld-context schema/revaise_temp.yaml > docs/api/context.jsonld || echo "JSON-LD context generated"
                rm -f schema/revaise_temp.yaml

            # Copy README if it doesn't exist in docs
            - test -f docs/index.md || cp README.md docs/index.md

            # Create schema index if it doesn't exist
            - |
                if [ ! -f docs/schema/index.md ]; then
                  echo "# Schema Documentation" > docs/schema/index.md
                  echo "" >> docs/schema/index.md
                  echo "## Main Schema" >> docs/schema/index.md
                  echo "- [RevAIse Schema](main/)" >> docs/schema/index.md
                  echo "" >> docs/schema/index.md
                  echo "## Objects" >> docs/schema/index.md
                  for dir in docs/schema/objects/*/; do
                    if [ -d "$dir" ]; then
                      name=$(basename "$dir")
                      echo "- [$name](objects/$name/)" >> docs/schema/index.md
                    fi
                  done
                  echo "" >> docs/schema/index.md
                  echo "## Stages" >> docs/schema/index.md
                  for dir in docs/schema/stages/*/; do
                    if [ -d "$dir" ]; then
                      name=$(basename "$dir")
                      echo "- [$name](stages/$name/)" >> docs/schema/index.md
                    fi
                  done
                fi

# Build documentation with MkDocs
mkdocs:
    configuration: mkdocs.yml
    fail_on_warning: false

# Python dependencies
python:
    install:
        - requirements: docs/requirements.txt

# Optionally build your docs in additional formats
formats:
    - pdf
    - htmlzip
# ReadTheDocs will automatically:
# - Build documentation for each git tag (stable versions)
# - Build documentation for main branch (latest/dev)
# - Keep all versions accessible via version selector
# - Set the default version to the latest stable tag
